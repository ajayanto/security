name: CI Pipeline with Trivy

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - 'Dockerfile'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - dev
    paths:
      - 'Dockerfile'

jobs:
  build-and-scan:
    name: Build and Scan ${{ matrix.target }} Dockerfile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: main
            dockerfile: ./Dockerfile
            context: .
            image: ecommerce-main:ci
            artifact: trivy-main-results
            output: trivy-main-results.sarif
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      actions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -f ${{ matrix.dockerfile }} -t ${{ matrix.image }} ${{ matrix.context }}

      - name: Get short Git commit SHA
        id: vars
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner on the built image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}
          format: 'sarif'
          output: ${{ matrix.output }}
          severity: 'CRITICAL,HIGH'
          build-args: |
            GIT_SHA=${{ steps.vars.outputs.SHA_SHORT }}

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.output }}

      - name: Upload SARIF report to GitHub Security
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const zlib = require('zlib');
            const sarif = fs.readFileSync(`${{ matrix.output }}`, 'utf8');
            const gzippedSarif = zlib.gzipSync(sarif);
            await github.rest.codeScanning.uploadSarif({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              ref: context.ref,
              sarif: gzippedSarif.toString('base64'),
              checkout_uri: `file://${process.env.GITHUB_WORKSPACE}`,
              tool_name: 'trivy'
            });
        env:
          MATRIX_DOCKERFILE: ${{ matrix.dockerfile }}



  